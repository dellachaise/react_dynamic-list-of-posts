{"version":3,"sources":["components/UsersPosts/UsersPosts.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","components/PostDetails/PostDetails.tsx","api/posts.ts","api/comments.ts","App.tsx","api/users.ts","index.tsx"],"names":["UsersPosts","user","selectedPostId","selectPostId","useState","isOpen","setToggle","posts","map","userPost","className","userId","title","type","onClick","userPostId","id","PostsList","users","selectedUserId","NewCommentForm","comments","setNewComment","name","setName","email","setEmail","body","setBody","options","method","headers","JSON","stringify","postId","onSubmit","event","preventDefault","fetch","then","response","json","newComment","value","placeholder","onChange","target","request","url","PostDetails","selectedPost","setSelectedPost","setComments","isShown","useEffect","postFromServer","getPostComments","commentsServer","length","comment","commentId","filter","currentComments","App","setUsers","setSelectedUserId","setSelectedPostId","usersFromServer","usersWithPosts","slice","currentUser","postsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.013bb518.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\ntype Props = {\n  user: UserWithPosts;\n  selectedPostId: number;\n  selectPostId: (postId: number) => void;\n};\n\nexport const UsersPosts: React.FC<Props>\n= ({\n  user, selectedPostId, selectPostId,\n}) => {\n  const [isOpen, setToggle] = useState(false);\n  const clickHandler = (userPostId: number) => {\n    if (userPostId === selectedPostId) {\n      setToggle(!isOpen);\n      selectPostId(0);\n    } else {\n      setToggle(!isOpen);\n      selectPostId(userPostId);\n    }\n  };\n\n  return (\n    <>\n      {user.posts.map((userPost) => (\n        <li className=\"PostsList__item\" key={userPost.id}>\n          <div>\n            <b>{`[User #${userPost.userId}]: `}</b>\n            {userPost.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => clickHandler(userPost.id)}\n          >\n            {isOpen && selectedPostId === userPost.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport './PostsList.scss';\nimport { UsersPosts } from '../UsersPosts/UsersPosts';\n\ntype Props = {\n  users: UserWithPosts[];\n  selectedUserId: number;\n  selectedPostId: number;\n  selectPostId: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props>\n= ({\n  users,\n  selectedUserId,\n  selectedPostId,\n  selectPostId,\n}) => {\n  return (\n\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {\n          !selectedUserId\n            ? users.map((user) => (\n              (\n                <UsersPosts\n                  user={user}\n                  key={user.id}\n                  selectedPostId={selectedPostId}\n                  selectPostId={selectPostId}\n                />\n              )\n            ))\n            : (\n              <UsersPosts\n                user={users[selectedUserId - 1]}\n                selectedPostId={selectedPostId}\n                selectPostId={selectPostId}\n              />\n            )\n        }\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number,\n  comments: Comment[] | undefined,\n  setNewComment: (currentComments: Comment[], newComment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  comments,\n  setNewComment,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const url = 'https://mate.academy/students-api/comments';\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId: selectedPostId,\n      name,\n      email,\n      body,\n    }),\n  };\n  const submitHandler = () => {\n    fetch(url, options)\n      .then((response) => {\n        return response.json();\n      })\n      .then((newComment) => {\n        setNewComment(comments || [], newComment);\n      });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        submitHandler();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostById } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState<UserPost>();\n  const [comments, setComments] = useState<Comment[]>();\n  const [isShown, setToggle] = useState(false);\n\n  useEffect(() => {\n    if (selectedPostId) {\n      getPostById(selectedPostId)\n        .then((postFromServer) => setSelectedPost(postFromServer));\n\n      getPostComments(selectedPostId)\n        .then((commentsServer) => setComments(commentsServer));\n    }\n\n    setToggle(false);\n  }, [selectedPostId]);\n\n  const deleteCommentHandler = (commentId: number) => {\n    setComments(comments?.filter((comment) => comment.id !== commentId));\n  };\n\n  const setNewComment = (currentComments: Comment[], newComment: Comment) => {\n    setComments([...currentComments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\" data-cy=\"postDetails\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setToggle(!isShown)}\n        >\n          {isShown ? `Hide ${comments?.length} comments` : 'Show'}\n        </button>\n\n        {isShown && (\n          <ul className=\"PostDetails__list\">\n            {comments?.map((comment) => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteCommentHandler(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            comments={comments}\n            setNewComment={setNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUserPosts = (userId: number) => {\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostById = (postId: number) => {\n  return request(`/posts/${postId}`);\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<UserWithPosts[] | null>(null);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  useEffect(() => {\n    getUsers()\n      .then((usersFromServer) => {\n        const currentUsers = usersFromServer.slice(0, 10);\n\n        const usersWithPosts = currentUsers.map((user: User) => {\n          const currentUser: UserWithPosts = { ...user, posts: [] };\n\n          getUserPosts(user.id)\n            .then((postsFromServer) => {\n              currentUser.posts = postsFromServer;\n            });\n\n          return currentUser;\n        });\n\n        setUsers(usersWithPosts);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            {users?.map((user) => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {users\n            && (\n              <PostsList\n                users={users}\n                selectedUserId={selectedUserId}\n                selectedPostId={selectedPostId}\n                selectPostId={selectPostId}\n              />\n            )}\n        </div>\n\n        {selectedPostId !== 0\n          && (\n            <div className=\"App__content\">\n              <PostDetails selectedPostId={selectedPostId} />\n            </div>\n          )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}